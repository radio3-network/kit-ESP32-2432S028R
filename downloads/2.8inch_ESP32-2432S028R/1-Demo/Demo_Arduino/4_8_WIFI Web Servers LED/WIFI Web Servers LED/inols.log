






Started logging.

<<<
Content-Length: 3333

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":3100,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7377

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－湖南创乐博智能科技有限公司－－－－\r\n  文件名：40.WIFI Web Servers LED.ino\r\n  版本：V2.0\r\n  author: zhulin\r\n  说明：WIFI Web Servers 双色LED灯实验\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// 输入自己可以上网的WIFI名称和密码 网页控制建议用安卓手机确保ESP32在统一网络内\r\nconst char* ssid = \"vivo iQOO Neo\";\r\nconst char* password = \"qwer1234\";\r\n\r\n// 设置web服务器端口号为80\r\nWiFiServer server(80);\r\n\r\n// 变量来存储HTTP请求\r\nString header;\r\n\r\n// 用于存储当前输出状态的辅助变量\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// 给GPIO管脚分配输出变量\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// 当前时间\r\nunsigned long currentTime = millis();\r\n// 之前的时间\r\nunsigned long previousTime = 0; \r\n// 定义超时时间(以毫秒为单位)(例如:2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // 将输出变量初始化为输出\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // 将输出设置为LOW\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // 使用SSID和密码连接Wi-Fi网络\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // 打印本地IP地址并启动web服务器\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // 监听 clients\r\n\r\n  if (client) {                             // 如果新客户端连接\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // 在串行端口中打印一条信息\r\n    String currentLine = \"\";                // 创建一个String来保存来自客户端的传入数据\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // 在客户端连接时进行循环\r\n      currentTime = millis();\r\n      if (client.available()) {             // 如果要从客户端读取字节,\r\n        char c = client.read();             // 然后读取一个字节\r\n        Serial.write(c);                    // 在串行监视器上打印出来\r\n        header += c;\r\n        if (c == '\\n') {                    // 如果字节是换行符\r\n          // 如果当前行为空，则一行中有两个换行符。\r\n          // 这是客户端HTTP请求的结束，所以发送一个响应:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP报头总是以响应代码开始(例如HTTP/1.1 200 OK)\r\n            // 然后是content-type，这样客户端就知道接下来会发生什么，然后是空行:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // 打开和关闭gpio\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // 显示HTML网页\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS来设置开/关按钮的样式\r\n            // 您可以随意更改背景颜色和字体大小属性以适应您的首选项\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // 网页标题\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // 显示当前状态和GPIO 16的ON/OFF按钮\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // 如果output26State为off，则显示ON按钮\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // 显示当前状态和GPIO 17的ON/OFF按钮\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // 如果output26State为off，则显示ON按钮  \r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP响应以另一个空行结束\r\n            client.println();\r\n            // 跳出while循环\r\n            break;\r\n          } else { // 如果你有一个换行符，那么清除currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // 如果你得到了除了回车符以外的其他字符，\r\n          currentLine += c;      // 将它添加到currentLine的末尾\r\n        }\r\n      }\r\n    }\r\n    // 清除头部变量\r\n    header = \"\";\r\n    // 关闭连接\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 381

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":0,"character":0},"end":{"line":0,"character":0}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3333

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":2904,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7492

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"vivo iQOO Neo\";\r\nconst char* password = \"qwer1234\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 382

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":4,"character":60}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3333

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":2096,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"zp198612\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 385

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":10,"character":29},"end":{"line":10,"character":29}},"context":{"diagnostics":[]}}}Content-Length: 310

{"jsonrpc":"2.0","id":2,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20






Started logging.

<<<
Content-Length: 3334

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":16756,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"12345678\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 385

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":11,"character":32},"end":{"line":11,"character":32}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3334

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":19956,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"12345678\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 385

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":11,"character":32},"end":{"line":11,"character":32}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3334

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":21224,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"12345678\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 382

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":1,"character":0},"end":{"line":3,"character":14}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3333

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":9692,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"12345678\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 385

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":21,"character":29},"end":{"line":21,"character":29}},"context":{"diagnostics":[]}}}






Started logging.

<<<
Content-Length: 3334

{"jsonrpc":"2.0","id":0,"method":"initialize","params":{"processId":24608,"clientInfo":{"name":"vscode","version":"1.50.0"},"rootPath":"c:\\Users\\zhang'pei\\Desktop\\ESP32-2432S028例子\\arduino\\Source code\\4_8_WIFI Web Servers LED\\WIFI Web Servers LED","rootUri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","capabilities":{"workspace":{"applyEdit":true,"workspaceEdit":{"documentChanges":true,"resourceOperations":["create","rename","delete"],"failureHandling":"textOnlyTransactional"},"didChangeConfiguration":{"dynamicRegistration":true},"didChangeWatchedFiles":{"dynamicRegistration":true},"symbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]}},"executeCommand":{"dynamicRegistration":true},"configuration":true,"workspaceFolders":true},"textDocument":{"publishDiagnostics":{"relatedInformation":true,"versionSupport":false,"tagSupport":{"valueSet":[1,2]}},"synchronization":{"dynamicRegistration":true,"willSave":true,"willSaveWaitUntil":true,"didSave":true},"completion":{"dynamicRegistration":true,"contextSupport":true,"completionItem":{"snippetSupport":true,"commitCharactersSupport":true,"documentationFormat":["markdown","plaintext"],"deprecatedSupport":true,"preselectSupport":true,"tagSupport":{"valueSet":[1]}},"completionItemKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]}},"hover":{"dynamicRegistration":true,"contentFormat":["markdown","plaintext"]},"signatureHelp":{"dynamicRegistration":true,"signatureInformation":{"documentationFormat":["markdown","plaintext"],"parameterInformation":{"labelOffsetSupport":true}},"contextSupport":true},"definition":{"dynamicRegistration":true,"linkSupport":true},"references":{"dynamicRegistration":true},"documentHighlight":{"dynamicRegistration":true},"documentSymbol":{"dynamicRegistration":true,"symbolKind":{"valueSet":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]},"hierarchicalDocumentSymbolSupport":true},"codeAction":{"dynamicRegistration":true,"isPreferredSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}},"codeLens":{"dynamicRegistration":true},"formatting":{"dynamicRegistration":true},"rangeFormatting":{"dynamicRegistration":true},"onTypeFormatting":{"dynamicRegistration":true},"rename":{"dynamicRegistration":true,"prepareSupport":true},"documentLink":{"dynamicRegistration":true,"tooltipSupport":true},"typeDefinition":{"dynamicRegistration":true,"linkSupport":true},"implementation":{"dynamicRegistration":true,"linkSupport":true},"colorProvider":{"dynamicRegistration":true},"foldingRange":{"dynamicRegistration":true,"rangeLimit":5000,"lineFoldingOnly":true},"declaration":{"dynamicRegistration":true,"linkSupport":true},"selectionRange":{"dynamicRegistration":true}},"window":{"workDoneProgress":true}},"initializationOptions":{},"trace":"off","workspaceFolders":[{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED","name":"WIFI Web Servers LED"}]}}
>>>
Content-Length: 598

{"id":0,"result":{"capabilities":{"textDocumentSync":2,"hoverProvider":true,"completionProvider":{"triggerCharacters":[".","\u003e",":"]},"signatureHelpProvider":{"triggerCharacters":["(",","]},"definitionProvider":true,"documentHighlightProvider":true,"documentSymbolProvider":true,"workspaceSymbolProvider":true,"codeActionProvider":true,"documentFormattingProvider":true,"documentRangeFormattingProvider":true,"documentOnTypeFormattingProvider":{"firstTriggerCharacter":"\n"},"renameProvider":false,"executeCommandProvider":{"commands":["clangd.applyFix","clangd.applyTweak"]}}},"jsonrpc":"2.0"}
<<<
Content-Length: 52

{"jsonrpc":"2.0","method":"initialized","params":{}}Content-Length: 7487

{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino","languageId":"cpp","version":1,"text":"/********************************************\r\n －－－－深圳市晶彩智能有限公司－－－－\r\n  File name：40.WIFI Web Servers LED.ino\r\n  Version：V2.0\r\n  Illustrate：WIFI Web Servers Two-color LED light experiment\r\n ********************************************/\r\n#include <WiFi.h>\r\n\r\n// Enter the WIFI name and password that you can access to the Internet. \r\n//It is recommended to use an Android phone for web control to ensure that the ESP32 is in the same network.\r\nconst char* ssid = \"CMCC-404\";\r\nconst char* password = \"12345678\";\r\n\r\n// Set the web server port number to 80\r\nWiFiServer server(80);\r\n\r\n// Variable to store the HTTP request\r\nString header;\r\n\r\n// Auxiliary variable for storing the current output state\r\nString output25State = \"off\";\r\nString output26State = \"off\";\r\n\r\n// Assign output variables to GPIO pins\r\nconst int output16 = 16;\r\nconst int output17 = 17;\r\n\r\n// Current time\r\nunsigned long currentTime = millis();\r\n// Previous time\r\nunsigned long previousTime = 0; \r\n// Define the timeout in milliseconds (eg: 2000ms = 2s)\r\nconst long timeoutTime = 2000;\r\n\r\nvoid setup() {\r\n  Serial.begin(115200);\r\n  // Initialize output variable to output\r\n  pinMode(output16, OUTPUT);\r\n  pinMode(output17, OUTPUT);\r\n  // Set output to HIGH\r\n  digitalWrite(output16, HIGH);\r\n  digitalWrite(output17, HIGH);\r\n\r\n  // Connect to Wi-Fi network using SSID and password\r\n  Serial.print(\"Connecting to \");\r\n  Serial.println(ssid);\r\n  WiFi.begin(ssid, password);\r\n  while (WiFi.status() != WL_CONNECTED) {\r\n    delay(500);\r\n    Serial.print(\".\");\r\n  }\r\n  // Print the local IP address and start the web server\r\n  Serial.println(\"\");\r\n  Serial.println(\"WiFi connected.\");\r\n  Serial.println(\"IP address: \");\r\n  Serial.println(WiFi.localIP());\r\n  server.begin();\r\n}\r\n\r\nvoid loop(){\r\n  WiFiClient client = server.available();   // Monitor clients\r\n\r\n  if (client) {                             // If a new client connects\r\n    currentTime = millis();\r\n    previousTime = currentTime;\r\n    Serial.println(\"New Client.\");          // Print a message in the serial port\r\n    String currentLine = \"\";                // Create a String to hold incoming data from the client\r\n    while (client.connected() && currentTime - previousTime <= timeoutTime) {  // Loop while client connects\r\n      currentTime = millis();\r\n      if (client.available()) {             // If you want to read bytes from the client\r\n        char c = client.read();             // Then read a byte\r\n        Serial.write(c);                    // Print out on serial monitor\r\n        header += c;\r\n        if (c == '\\n') {                    // If the byte is a newline\r\n          // If the current line is empty, there are two newlines on a line.\r\n          // This is the end of the client HTTP request, so send a response:\r\n          if (currentLine.length() == 0) {\r\n            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)\r\n            // Then the content-type, so the client knows what to expect, followed by the empty line:\r\n            client.println(\"HTTP/1.1 200 OK\");\r\n            client.println(\"Content-type:text/html\");\r\n            client.println(\"Connection: close\");\r\n            client.println();\r\n            \r\n            // turn gpio on and off\r\n\r\n            if (header.indexOf(\"GET /16/on\") >= 0) {\r\n              Serial.println(\"GPIO 16 on\");\r\n              output25State = \"on\";\r\n              digitalWrite(output16, LOW);\r\n            } else if (header.indexOf(\"GET /16/off\") >= 0) {\r\n              Serial.println(\"GPIO 16 off\");\r\n              output25State = \"off\";\r\n              digitalWrite(output16, HIGH);\r\n            } else if (header.indexOf(\"GET /17/on\") >= 0) {\r\n              Serial.println(\"GPIO 17 on\");\r\n              output26State = \"on\";\r\n              digitalWrite(output17, LOW);\r\n            } else if (header.indexOf(\"GET /17/off\") >= 0) {\r\n              Serial.println(\"GPIO 17 off\");\r\n              output26State = \"off\";\r\n              digitalWrite(output17, HIGH);\r\n            }\r\n            \r\n            // Display HTML pages\r\n            client.println(\"<!DOCTYPE html><html>\");\r\n            client.println(\"<head><meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\">\");\r\n            client.println(\"<link rel=\\\"icon\\\" href=\\\"data:,\\\">\");\r\n            // CSS to style the on/off button\r\n            // Feel free to change the background color and font size properties to suit your preferences\r\n            client.println(\"<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto; text-align: center;}\");\r\n            client.println(\".button { background-color: #4CAF50; border: none; color: white; padding: 16px 40px;\");\r\n            client.println(\"text-decoration: none; font-size: 30px; margin: 2px; cursor: pointer;}\");\r\n            client.println(\".button2 {background-color: #555555;}</style></head>\");\r\n            \r\n            // Page title\r\n            client.println(\"<body><h1>ESP32 Web Server LED </h1>\");\r\n            \r\n            // Display current status and ON/OFF button of GPIO 16\r\n            client.println(\"<p>GREEN LED - State \" + output25State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output25State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/16/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/16/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            } \r\n               \r\n            // Display current status and ON/OFF button of GPIO 17\r\n            client.println(\"<p> BLUE LED - State \" + output26State + \"</p>\");\r\n            // If output26State is off, show ON button\r\n            if (output26State==\"off\") {\r\n              client.println(\"<p><a href=\\\"/17/on\\\"><button class=\\\"button\\\">ON</button></a></p>\");\r\n            } else {\r\n              client.println(\"<p><a href=\\\"/17/off\\\"><button class=\\\"button button2\\\">OFF</button></a></p>\");\r\n            }\r\n            client.println(\"</body></html>\");\r\n            \r\n            // HTTP response ends with another blank line\r\n            client.println();\r\n            // Out of the while loop\r\n            break;\r\n          } else { // If you have a newline then clear currentLine\r\n            currentLine = \"\";\r\n          }\r\n        } else if (c != '\\r') {  // If you get characters other than carriage return\r\n          currentLine += c;      // Add it to the end of currentLine\r\n        }\r\n      }\r\n    }\r\n    // Clear header variable\r\n    header = \"\";\r\n    // Close the connection\r\n    client.stop();\r\n    Serial.println(\"Client disconnected.\");\r\n    Serial.println(\"\");\r\n  }\r\n}"}}}Content-Length: 385

{"jsonrpc":"2.0","id":1,"method":"textDocument/codeAction","params":{"textDocument":{"uri":"file:///c%3A/Users/zhang%27pei/Desktop/ESP32-2432S028%E4%BE%8B%E5%AD%90/arduino/Source%20code/4_8_WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED/WIFI%20Web%20Servers%20LED.ino"},"range":{"start":{"line":21,"character":29},"end":{"line":21,"character":29}},"context":{"diagnostics":[]}}}